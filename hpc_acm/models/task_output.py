# coding: utf-8

"""
    HPC Web API

    Preview  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TaskOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eof': 'bool',
        'offset': 'int',
        'size': 'int',
        'content': 'str'
    }

    attribute_map = {
        'eof': 'eof',
        'offset': 'offset',
        'size': 'size',
        'content': 'content'
    }

    def __init__(self, eof=None, offset=None, size=None, content=None):  # noqa: E501
        """TaskOutput - a model defined in Swagger"""  # noqa: E501

        self._eof = None
        self._offset = None
        self._size = None
        self._content = None
        self.discriminator = None

        if eof is not None:
            self.eof = eof
        if offset is not None:
            self.offset = offset
        if size is not None:
            self.size = size
        if content is not None:
            self.content = content

    @property
    def eof(self):
        """Gets the eof of this TaskOutput.  # noqa: E501

        Whether the end of output is reached  # noqa: E501

        :return: The eof of this TaskOutput.  # noqa: E501
        :rtype: bool
        """
        return self._eof

    @eof.setter
    def eof(self, eof):
        """Sets the eof of this TaskOutput.

        Whether the end of output is reached  # noqa: E501

        :param eof: The eof of this TaskOutput.  # noqa: E501
        :type: bool
        """

        self._eof = eof

    @property
    def offset(self):
        """Gets the offset of this TaskOutput.  # noqa: E501

        Distance between the start of the returned content and the start of the whole output  # noqa: E501

        :return: The offset of this TaskOutput.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this TaskOutput.

        Distance between the start of the returned content and the start of the whole output  # noqa: E501

        :param offset: The offset of this TaskOutput.  # noqa: E501
        :type: int
        """

        self._offset = offset

    @property
    def size(self):
        """Gets the size of this TaskOutput.  # noqa: E501

        Length of the content(in a unit meaningful only to the server, not in character of content)  # noqa: E501

        :return: The size of this TaskOutput.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this TaskOutput.

        Length of the content(in a unit meaningful only to the server, not in character of content)  # noqa: E501

        :param size: The size of this TaskOutput.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def content(self):
        """Gets the content of this TaskOutput.  # noqa: E501

        The output content  # noqa: E501

        :return: The content of this TaskOutput.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this TaskOutput.

        The output content  # noqa: E501

        :param content: The content of this TaskOutput.  # noqa: E501
        :type: str
        """

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

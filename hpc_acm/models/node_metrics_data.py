# coding: utf-8

"""
    HPC Web API

    Preview  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from hpc_acm.models.node_metrics_metric_items import NodeMetricsMetricItems  # noqa: F401,E501


class NodeMetricsData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'datetime',
        'metric_items': 'list[NodeMetricsMetricItems]'
    }

    attribute_map = {
        'time': 'time',
        'metric_items': 'metricItems'
    }

    def __init__(self, time=None, metric_items=None):  # noqa: E501
        """NodeMetricsData - a model defined in Swagger"""  # noqa: E501

        self._time = None
        self._metric_items = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if metric_items is not None:
            self.metric_items = metric_items

    @property
    def time(self):
        """Gets the time of this NodeMetricsData.  # noqa: E501

        Time of the metric data  # noqa: E501

        :return: The time of this NodeMetricsData.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this NodeMetricsData.

        Time of the metric data  # noqa: E501

        :param time: The time of this NodeMetricsData.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def metric_items(self):
        """Gets the metric_items of this NodeMetricsData.  # noqa: E501


        :return: The metric_items of this NodeMetricsData.  # noqa: E501
        :rtype: list[NodeMetricsMetricItems]
        """
        return self._metric_items

    @metric_items.setter
    def metric_items(self, metric_items):
        """Sets the metric_items of this NodeMetricsData.


        :param metric_items: The metric_items of this NodeMetricsData.  # noqa: E501
        :type: list[NodeMetricsMetricItems]
        """

        self._metric_items = metric_items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeMetricsData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    HPC Web API

    Preview  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from hpc_acm.models.ip_v4 import IpV4  # noqa: F401,E501
from hpc_acm.models.ip_v6 import IpV6  # noqa: F401,E501
from hpc_acm.models.mac_address import MacAddress  # noqa: F401,E501


class NodeNetwork(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'mac_address': 'MacAddress',
        'ip_v4': 'IpV4',
        'ip_v6': 'IpV6',
        'is_ib': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'mac_address': 'macAddress',
        'ip_v4': 'ipV4',
        'ip_v6': 'ipV6',
        'is_ib': 'isIB'
    }

    def __init__(self, name=None, mac_address=None, ip_v4=None, ip_v6=None, is_ib=None):  # noqa: E501
        """NodeNetwork - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._mac_address = None
        self._ip_v4 = None
        self._ip_v6 = None
        self._is_ib = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if mac_address is not None:
            self.mac_address = mac_address
        if ip_v4 is not None:
            self.ip_v4 = ip_v4
        if ip_v6 is not None:
            self.ip_v6 = ip_v6
        if is_ib is not None:
            self.is_ib = is_ib

    @property
    def name(self):
        """Gets the name of this NodeNetwork.  # noqa: E501


        :return: The name of this NodeNetwork.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeNetwork.


        :param name: The name of this NodeNetwork.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def mac_address(self):
        """Gets the mac_address of this NodeNetwork.  # noqa: E501


        :return: The mac_address of this NodeNetwork.  # noqa: E501
        :rtype: MacAddress
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this NodeNetwork.


        :param mac_address: The mac_address of this NodeNetwork.  # noqa: E501
        :type: MacAddress
        """

        self._mac_address = mac_address

    @property
    def ip_v4(self):
        """Gets the ip_v4 of this NodeNetwork.  # noqa: E501


        :return: The ip_v4 of this NodeNetwork.  # noqa: E501
        :rtype: IpV4
        """
        return self._ip_v4

    @ip_v4.setter
    def ip_v4(self, ip_v4):
        """Sets the ip_v4 of this NodeNetwork.


        :param ip_v4: The ip_v4 of this NodeNetwork.  # noqa: E501
        :type: IpV4
        """

        self._ip_v4 = ip_v4

    @property
    def ip_v6(self):
        """Gets the ip_v6 of this NodeNetwork.  # noqa: E501


        :return: The ip_v6 of this NodeNetwork.  # noqa: E501
        :rtype: IpV6
        """
        return self._ip_v6

    @ip_v6.setter
    def ip_v6(self, ip_v6):
        """Sets the ip_v6 of this NodeNetwork.


        :param ip_v6: The ip_v6 of this NodeNetwork.  # noqa: E501
        :type: IpV6
        """

        self._ip_v6 = ip_v6

    @property
    def is_ib(self):
        """Gets the is_ib of this NodeNetwork.  # noqa: E501


        :return: The is_ib of this NodeNetwork.  # noqa: E501
        :rtype: bool
        """
        return self._is_ib

    @is_ib.setter
    def is_ib(self, is_ib):
        """Sets the is_ib of this NodeNetwork.


        :param is_ib: The is_ib of this NodeNetwork.  # noqa: E501
        :type: bool
        """

        self._is_ib = is_ib

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeNetwork):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

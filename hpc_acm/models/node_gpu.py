# coding: utf-8

"""
    HPC Web API

    Preview  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NodeGpu(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'uuid': 'str',
        'pci_bus_device': 'str',
        'pci_bus_id': 'str',
        'total_memory': 'int',
        'max_sm_clock': 'int'
    }

    attribute_map = {
        'name': 'name',
        'uuid': 'uuid',
        'pci_bus_device': 'pciBusDevice',
        'pci_bus_id': 'pciBusId',
        'total_memory': 'totalMemory',
        'max_sm_clock': 'maxSMClock'
    }

    def __init__(self, name=None, uuid=None, pci_bus_device=None, pci_bus_id=None, total_memory=None, max_sm_clock=None):  # noqa: E501
        """NodeGpu - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._uuid = None
        self._pci_bus_device = None
        self._pci_bus_id = None
        self._total_memory = None
        self._max_sm_clock = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if uuid is not None:
            self.uuid = uuid
        if pci_bus_device is not None:
            self.pci_bus_device = pci_bus_device
        if pci_bus_id is not None:
            self.pci_bus_id = pci_bus_id
        if total_memory is not None:
            self.total_memory = total_memory
        if max_sm_clock is not None:
            self.max_sm_clock = max_sm_clock

    @property
    def name(self):
        """Gets the name of this NodeGpu.  # noqa: E501


        :return: The name of this NodeGpu.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeGpu.


        :param name: The name of this NodeGpu.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def uuid(self):
        """Gets the uuid of this NodeGpu.  # noqa: E501


        :return: The uuid of this NodeGpu.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this NodeGpu.


        :param uuid: The uuid of this NodeGpu.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def pci_bus_device(self):
        """Gets the pci_bus_device of this NodeGpu.  # noqa: E501


        :return: The pci_bus_device of this NodeGpu.  # noqa: E501
        :rtype: str
        """
        return self._pci_bus_device

    @pci_bus_device.setter
    def pci_bus_device(self, pci_bus_device):
        """Sets the pci_bus_device of this NodeGpu.


        :param pci_bus_device: The pci_bus_device of this NodeGpu.  # noqa: E501
        :type: str
        """

        self._pci_bus_device = pci_bus_device

    @property
    def pci_bus_id(self):
        """Gets the pci_bus_id of this NodeGpu.  # noqa: E501


        :return: The pci_bus_id of this NodeGpu.  # noqa: E501
        :rtype: str
        """
        return self._pci_bus_id

    @pci_bus_id.setter
    def pci_bus_id(self, pci_bus_id):
        """Sets the pci_bus_id of this NodeGpu.


        :param pci_bus_id: The pci_bus_id of this NodeGpu.  # noqa: E501
        :type: str
        """

        self._pci_bus_id = pci_bus_id

    @property
    def total_memory(self):
        """Gets the total_memory of this NodeGpu.  # noqa: E501


        :return: The total_memory of this NodeGpu.  # noqa: E501
        :rtype: int
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """Sets the total_memory of this NodeGpu.


        :param total_memory: The total_memory of this NodeGpu.  # noqa: E501
        :type: int
        """

        self._total_memory = total_memory

    @property
    def max_sm_clock(self):
        """Gets the max_sm_clock of this NodeGpu.  # noqa: E501


        :return: The max_sm_clock of this NodeGpu.  # noqa: E501
        :rtype: int
        """
        return self._max_sm_clock

    @max_sm_clock.setter
    def max_sm_clock(self, max_sm_clock):
        """Sets the max_sm_clock of this NodeGpu.


        :param max_sm_clock: The max_sm_clock of this NodeGpu.  # noqa: E501
        :type: int
        """

        self._max_sm_clock = max_sm_clock

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeGpu):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

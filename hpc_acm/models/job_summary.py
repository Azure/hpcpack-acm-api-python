# coding: utf-8

"""
    HPC Web API

    Preview  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JobSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'queued': 'float',
        'running': 'float',
        'finishing': 'float',
        'finished': 'float',
        'canceling': 'float',
        'canceled': 'float',
        'failed': 'float'
    }

    attribute_map = {
        'queued': 'Queued',
        'running': 'Running',
        'finishing': 'Finishing',
        'finished': 'Finished',
        'canceling': 'Canceling',
        'canceled': 'Canceled',
        'failed': 'Failed'
    }

    def __init__(self, queued=None, running=None, finishing=None, finished=None, canceling=None, canceled=None, failed=None):  # noqa: E501
        """JobSummary - a model defined in Swagger"""  # noqa: E501

        self._queued = None
        self._running = None
        self._finishing = None
        self._finished = None
        self._canceling = None
        self._canceled = None
        self._failed = None
        self.discriminator = None

        if queued is not None:
            self.queued = queued
        if running is not None:
            self.running = running
        if finishing is not None:
            self.finishing = finishing
        if finished is not None:
            self.finished = finished
        if canceling is not None:
            self.canceling = canceling
        if canceled is not None:
            self.canceled = canceled
        if failed is not None:
            self.failed = failed

    @property
    def queued(self):
        """Gets the queued of this JobSummary.  # noqa: E501

        number of jobs that are queued  # noqa: E501

        :return: The queued of this JobSummary.  # noqa: E501
        :rtype: float
        """
        return self._queued

    @queued.setter
    def queued(self, queued):
        """Sets the queued of this JobSummary.

        number of jobs that are queued  # noqa: E501

        :param queued: The queued of this JobSummary.  # noqa: E501
        :type: float
        """

        self._queued = queued

    @property
    def running(self):
        """Gets the running of this JobSummary.  # noqa: E501

        number of jobs that are running  # noqa: E501

        :return: The running of this JobSummary.  # noqa: E501
        :rtype: float
        """
        return self._running

    @running.setter
    def running(self, running):
        """Sets the running of this JobSummary.

        number of jobs that are running  # noqa: E501

        :param running: The running of this JobSummary.  # noqa: E501
        :type: float
        """

        self._running = running

    @property
    def finishing(self):
        """Gets the finishing of this JobSummary.  # noqa: E501

        number of jobs that are finishing  # noqa: E501

        :return: The finishing of this JobSummary.  # noqa: E501
        :rtype: float
        """
        return self._finishing

    @finishing.setter
    def finishing(self, finishing):
        """Sets the finishing of this JobSummary.

        number of jobs that are finishing  # noqa: E501

        :param finishing: The finishing of this JobSummary.  # noqa: E501
        :type: float
        """

        self._finishing = finishing

    @property
    def finished(self):
        """Gets the finished of this JobSummary.  # noqa: E501

        number of jobs that are finished  # noqa: E501

        :return: The finished of this JobSummary.  # noqa: E501
        :rtype: float
        """
        return self._finished

    @finished.setter
    def finished(self, finished):
        """Sets the finished of this JobSummary.

        number of jobs that are finished  # noqa: E501

        :param finished: The finished of this JobSummary.  # noqa: E501
        :type: float
        """

        self._finished = finished

    @property
    def canceling(self):
        """Gets the canceling of this JobSummary.  # noqa: E501

        number of jobs that are canceling  # noqa: E501

        :return: The canceling of this JobSummary.  # noqa: E501
        :rtype: float
        """
        return self._canceling

    @canceling.setter
    def canceling(self, canceling):
        """Sets the canceling of this JobSummary.

        number of jobs that are canceling  # noqa: E501

        :param canceling: The canceling of this JobSummary.  # noqa: E501
        :type: float
        """

        self._canceling = canceling

    @property
    def canceled(self):
        """Gets the canceled of this JobSummary.  # noqa: E501

        number of jobs that are canceled  # noqa: E501

        :return: The canceled of this JobSummary.  # noqa: E501
        :rtype: float
        """
        return self._canceled

    @canceled.setter
    def canceled(self, canceled):
        """Sets the canceled of this JobSummary.

        number of jobs that are canceled  # noqa: E501

        :param canceled: The canceled of this JobSummary.  # noqa: E501
        :type: float
        """

        self._canceled = canceled

    @property
    def failed(self):
        """Gets the failed of this JobSummary.  # noqa: E501

        number of jobs that are failed  # noqa: E501

        :return: The failed of this JobSummary.  # noqa: E501
        :rtype: float
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this JobSummary.

        number of jobs that are failed  # noqa: E501

        :param failed: The failed of this JobSummary.  # noqa: E501
        :type: float
        """

        self._failed = failed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
